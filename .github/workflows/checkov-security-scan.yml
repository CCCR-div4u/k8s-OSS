name: Render Helm → Checkov (Kubernetes)

on:
  pull_request:
    paths:
      - "argo-cd/**"
      - "harbor/**"
      - "keycloak/**"
      - "sonarqube/**"
      - "thanos/**"
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/checkov-security-scan.yml'
      - "argo-cd/**"
      - "harbor/**"
      - "keycloak/**"
      - "sonarqube/**"
      - "thanos/**"

permissions:
  contents: read
  security-events: write

concurrency:
  group: checkov-${{ github.ref }}
  cancel-in-progress: true

jobs:
  render-and-scan:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # ── 디렉터리별: 차트/값 파일 지정 ──
          - name: argo-cd
            chart_ref: argo/argo-cd
            values: "argo-cd/my-values.yaml"
          - name: harbor
            chart_ref: goharbor/harbor
            values: "harbor/override-values.yaml"
          - name: keycloak
            chart_ref: bitnami/keycloak
            values: "keycloak/installation/helm-values.yaml"
          - name: sonarqube
            chart_ref: sonarqube/sonarqube
            values: "sonarqube/override-values.yaml"
          - name: thanos
            chart_ref: bitnami/thanos
            values: "thanos/values/values.yaml"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Helm v3 설치
      - name: Setup Helm
        uses: azure/setup-helm@v4

      # 필요한 차트 리포 등록
      - name: Add Helm repos
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add goharbor https://helm.goharbor.io
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo add sonarqube https://SonarSource.github.io/helm-chart-sonarqube
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Prepare dirs
        run: |
          mkdir -p rendered results

      # values가 존재할 때만 -f 로 붙여서 렌더
      - name: Helm template (${{ matrix.name }})
        env:
          NAME: ${{ matrix.name }}
          CHART: ${{ matrix.chart_ref }}
          VALUES: ${{ matrix.values }}
        run: |
          set -euo pipefail
          VALUES_FLAGS=""
          for v in $VALUES; do
            if [ -f "$v" ]; then
              echo "Using values: $v"
              VALUES_FLAGS="$VALUES_FLAGS -f $v"
            else
              echo "Skip missing values: $v"
            fi
          done
          helm template "$NAME" "$CHART" $VALUES_FLAGS \
            --namespace "$NAME" \
            --create-namespace \
            > "rendered/${NAME}.yaml"
          # 빈 파일 방지
          test -s "rendered/${NAME}.yaml"

      # 컨테이너 기반 Checkov 액션으로 렌더 결과 스캔
      - name: Run Checkov on rendered/${{ matrix.name }}.yaml
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: rendered
          framework: kubernetes
          quiet: true
          output_format: sarif
          output_file_path: results/${{ matrix.name }}.sarif
          soft_fail: false

      # 업로드 전 결과 파일 유효성/디버그
      - name: Inspect SARIF (debug)
        if: always()
        run: |
          ls -lah results || true
          FILE="results/${{ matrix.name }}.sarif"
          if [ ! -s "$FILE" ]; then
            echo "::warning::No SARIF produced at $FILE (missing or empty)."
            exit 0
          fi
          echo "SARIF size: $(wc -c < "$FILE") bytes"
          head -n 20 "$FILE" | sed -e 's/::/--/g' || true

      # 포크 PR이면 권한 제한으로 실패하니 업로드 스킵
      - name: Upload SARIF (${{ matrix.name }})
        if: |
          always() && (github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false))
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/${{ matrix.name }}.sarif
          category: checkov-${{ matrix.name }}

      # 업로드 실패/스킵하더라도 파일은 아티팩트로 보존
      - name: Upload SARIF as artifact (fallback)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sarif-${{ matrix.name }}
          path: results/${{ matrix.name }}.sarif
          if-no-files-found: warn
