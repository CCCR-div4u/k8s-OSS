name: Render Helm → Checkov (Kubernetes)

on:
  pull_request:
    paths:
      - "argo-cd/**"
      - "harbor/**"
      - "keycloak/**"
      - "sonarqube/**"
      - "thanos/**"
  push:
    branches: [ main ]
    paths:
      - "argo-cd/**"
      - "harbor/**"
      - "keycloak/**"
      - "sonarqube/**"
      - "thanos/**"

permissions:
  contents: read
  security-events: write

concurrency:
  group: checkov-${{ github.ref }}
  cancel-in-progress: true

jobs:
  render-and-scan:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: argo-cd
            chart_ref: argo/argo-cd
            values: "argo-cd/my-values.yaml"
          - name: harbor
            chart_ref: goharbor/harbor
            values: "harbor/override-values.yaml"
          - name: keycloak
            chart_ref: bitnami/keycloak
            values: "keycloak/installation/helm-values.yaml"
          - name: sonarqube
            chart_ref: sonarqube/sonarqube
            values: "sonarqube/override-values.yaml"
          - name: thanos
            chart_ref: bitnami/thanos
            values: "thanos/values/values.yaml"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Add Helm repos
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add goharbor https://helm.goharbor.io
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo add sonarqube https://SonarSource.github.io/helm-chart-sonarqube
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Prepare dirs
        run: |
          mkdir -p rendered results

      - name: Helm template (${{ matrix.name }})
        env:
          NAME: ${{ matrix.name }}
          CHART: ${{ matrix.chart_ref }}
          VALUES: ${{ matrix.values }}
        run: |
          set -euo pipefail
          VALUES_FLAGS=""
          for v in $VALUES; do
            if [ -f "$v" ]; then
              echo "Using values: $v"
              VALUES_FLAGS="$VALUES_FLAGS -f $v"
            else
              echo "Skip missing values: $v"
            fi
          done
          helm template "$NAME" "$CHART" $VALUES_FLAGS \
            --namespace "$NAME" \
            --create-namespace \
            > "rendered/${NAME}.yaml"
          test -s "rendered/${NAME}.yaml"

      # 컨테이너 기반 Checkov 액션(도커 내부)
      - name: Run Checkov on rendered/${{ matrix.name }}.yaml
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: rendered
          framework: kubernetes
          quiet: true
          output_format: sarif
          # 결과 파일은 미리 만들어둔 results/ 밑으로
          output_file_path: results/${{ matrix.name }}.sarif
          soft_fail: false

      # 업로드 전에 결과 파일이 진짜 있는지 검사(디버깅용 로그 포함)
      - name: Inspect SARIF
        run: |
          ls -l results || true
          test -s "results/${{ matrix.name }}.sarif"

      - name: Upload SARIF (${{ matrix.name }})
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/${{ matrix.name }}.sarif
          category: checkov-${{ matrix.name }}

  # (옵션) 포크에서 온 PR은 업로드 스킵 — 권한 문제 회피
  # 필요 시 위 잡에 if 조건으로 합쳐도 됩니다.
  render-and-scan-from-fork:
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "Fork PR detected → skip SARIF upload (limited GITHUB_TOKEN)."
