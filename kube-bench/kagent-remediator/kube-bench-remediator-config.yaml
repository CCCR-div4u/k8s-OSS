apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-bench-remediator-config
  namespace: kagent
data:
  config.yaml: |
    # S3 설정
    s3:
      bucket: "kube-bench-results-bluesunnywings"
      region: "ap-northeast-2"
      latest_path: "kube-bench-results/latest/kube-bench-latest.json"
      date_path_pattern: "kube-bench-results/year={year}/month={month}/day={day}/"
      
    # 자동 수정 설정
    remediation:
      auto_fix_enabled: true
      dry_run: false
      severity_threshold: "HIGH"
      max_concurrent_fixes: 5
      
    # 대상 네임스페이스 (기본값)
    targets:
      default_namespaces:
        - "default"
        - "kube-system"
        - "kube-public"
      exclude_namespaces:
        - "kagent"
        - "kube-node-lease"
        
    # 수정 정책
    policies:
      pod_security_standards:
        enabled: true
        enforce_level: "restricted"
        audit_level: "restricted"
        warn_level: "restricted"
        
      service_account:
        disable_auto_mount_token: true
        
      network_policies:
        enabled: true
        default_deny_all: true
        allow_dns: true
        
      workload_security:
        remove_host_access: true
        disable_privilege_escalation: true
        drop_all_capabilities: true
        run_as_non_root: true
        
    # 알림 설정
    notifications:
      slack:
        enabled: true
        channel: "#security-alerts"
        mention_on_critical: true
        
      github:
        enabled: true
        create_issues: true
        repository: "CCCR-div4u/k8s-OSS"
        
    # 로깅 설정
    logging:
      level: "INFO"
      store_results: true
      retention_days: 30

---
apiVersion: v1
kind: Secret
metadata:
  name: kube-bench-remediator-secrets
  namespace: kagent
type: Opaque
stringData:
  # AWS 자격 증명 (필요 시)
  aws_access_key_id: ""
  aws_secret_access_key: ""
  
  # Slack 웹훅 URL
  slack_webhook_url: ""
  
  # GitHub 토큰
  github_token: ""

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-bench-remediator
rules:
# 읽기 권한
- apiGroups: [""]
  resources: ["namespaces", "pods", "services", "serviceaccounts", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "statefulsets", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
  verbs: ["get", "list", "watch"]

# 수정 권한 (제한적)
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["patch", "update"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["patch", "update"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "patch", "update"]
  resourceNames: ["kb-remediation-*"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "statefulsets"]
  verbs: ["patch", "update"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["create", "patch", "update", "delete"]

# 이벤트 및 로그 접근
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "create"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-bench-remediator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-bench-remediator
subjects:
- kind: ServiceAccount
  name: kube-bench-remediator
  namespace: kagent

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-bench-remediator
  namespace: kagent
  annotations:
    # EKS IRSA 설정 (필요 시)
    eks.amazonaws.com/role-arn: ""
automountServiceAccountToken: true
